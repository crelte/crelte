/** @hidden */
export default class SsrComponents {
	private modules: Set<string>;

	constructor() {
		this.modules = new Set();
	}

	/// ctx: Map
	addToContext(ctx: Map<string, any>) {
		ctx.set('modules', this.modules);
	}

	/// Returns preload for js and link stylesheet for css
	///
	/// ssrManifest: {}, gets generated by client build
	toHead(ssrManifest: Record<string, string[]>) {
		const requirements = new Set<string>();
		for (const mod of this.modules) {
			const deps = ssrManifest[mod] ?? [];
			deps.forEach(dep => requirements.add(dep));
		}

		let head = '';
		for (const req of requirements) {
			if (req.endsWith('.js')) {
				head += `\n\t\t<link rel="modulepreload" crossorigin href="${req}">`;
			} else if (req.endsWith('.css')) {
				head += `\n\t\t<link rel="stylesheet" crossorigin href="${req}">`;
			}
		}

		return head;
	}
}
